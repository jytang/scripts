#!/usr/bin/env python

"""
A personal script to mpv an anime episode.

The base URL to search from must be specified with the
ANISTRM_URL environment variable.
"""

import re
import requests
from sys import exit
from os import environ
from subprocess import call
from BeautifulSoup import BeautifulSoup
from urlparse import urljoin
from fuzzywuzzy import fuzz, process
from argparse import ArgumentParser, RawDescriptionHelpFormatter

END = '\033[0m'

nums = re.compile(r'\b0+(\d)')
normalize = lambda s: nums.sub(r'\1', s)
red = lambda s: '\033[31m{}{}'.format(s, END)
green = lambda s: '\033[32m{}{}'.format(s,END)
yellow = lambda s: '\033[33m{}{}'.format(s, END)
def exit_with(s):
    print('{}\n'.format(red(s)))
    exit(1)

parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument('search_terms',
                    help="anime series + episode number",
                    nargs='+',
                    type=str)
search_terms = normalize(' '.join(parser.parse_args().search_terms))

try:
    ANISTRM_URL = environ['ANISTRM_URL']
except KeyError:
    exit_with("You need ANISTRM_URL.")

link = ANISTRM_URL
while True:
    try:
        req = requests.get(link)
    except requests.exceptions.ConnectionError:
        exit_with("Could not reach \"{}\".".format(link))

    # Bail if content-type matched
    if req.headers['content-type'].startswith('video'):
        break

    links = BeautifulSoup(req.text).findAll('a')
    if not links:
        exit_with("Leaf link \"{}\" is not a video.".format(link))

    choice, _ = process.extractOne(
        search_terms, links,
        lambda l: normalize(l.string),
        fuzz.token_set_ratio
    )

    link = urljoin(ANISTRM_URL, choice.get('href'))
call(['mpv', link])
