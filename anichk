#!/usr/bin/env python

"""
Uses the hummingbird.me API and anichart.net API to tell you what episodes
you need to catch up on. You can specify the username either via argument or
the ANICHK_USERNAME environment variable.
"""

import requests
from sys import exit
from os import environ
from datetime import datetime, timedelta
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from humanize import naturaltime

# Constants and helpers
HB_URL = ('https://hummingbird.me/library_entries'
          '?status=Currently+Watching&user_id={}')
AC_URL = 'http://anichart.net/api/chart/airing'
END = '\033[0m'

to_cmp = lambda s: ''.join(c.lower() for c in s if c.isalnum())
def red(s):
    print('\033[31m' + s + END)
def green(s):
    print('\033[32m' + s + END)
def yellow(s):
    print('\033[33m' + s + END)

# Parse args
parser = ArgumentParser(description=__doc__,
                        formatter_class=RawDescriptionHelpFormatter)
parser.add_argument('username',
                    help="hummingbird.me username",
                    nargs='?',
                    type=str)
username = parser.parse_args().username or environ.get('ANICHK_USERNAME')
if not username:
    red("No username provided.")
    exit(1)

# Get your currently watching anime
print('Fetching hummingbird.me profile for {}...'.format(username))
try:
    hb = requests.get(HB_URL.format(username)).json()
except ValueError:
    red("User {} not found.".format(username))
    exit(1)
except requests.exceptions.ConnectionError:
    red("Could not reach hummingbird.me.")
    exit(1)

by_id = {
    a['id']: a
    for a in hb['anime']
}

# Get currently airing anime
print('Fetching currently airing series...')
try:
    ac = requests.get(AC_URL).json()
except requests.exceptions.ConnectionError:
    red("Could not reach anichart.net.")
    exit(1)

airing = {
    to_cmp(a['title_romaji']): a['airing']
    for a in ac
}

# Create list of series
anime = []
for info in hb['library_entries']:
    info.update(by_id[info['anime_id']])
    # For currently airing shows, pull in next episode info
    info.update(airing.get(to_cmp(info['romaji_title']), {}))
    anime.append(info)
anime.sort(key=lambda i: i['canonical_title'])

# Print info
print
if not anime:
    red("{} isn't watching anything currently airing.".format(username))
for a in anime:
    title = a['canonical_title']
    cur = a['episodes_watched']
    total = a['episode_count']

    try:
        available = a['next_episode'] - 1
    except KeyError:
        available = total

    # Print format: [7 chars] series_name
    # Only bother if we haven't finished the series
    if cur < total:
        # If we're waiting for next episode
        if cur == available:
            # Create human-readable countdown
            try:
                time = naturaltime(
                    datetime.now() + timedelta(seconds=a['countdown'])
                ).replace(
                    ' from now', ''
                ).replace(
                    'hours', 'hrs'
                ).replace(
                    'minutes', 'mins'
                ).replace(
                    'seconds', 'secs'
                )
            # Unknown time
            except KeyError:
                time = '   ?   '
            green("[{:>7}] {}".format(time, title))
        # If we're behind
        elif cur < available:
            yellow("[{:>3}/{:>3}] {}".format(cur, available, title))
        # Invalid state
        else:
            red("[INVALID] {}".format(title))
    # We need to mark this as complete
    else:
        red("[COMPLTE] {}".format(title))
print
