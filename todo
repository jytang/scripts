#!/bin/bash

# todo
# Author: Ethan Chan
# Date: 5/8/14
#
# A script to manage my todo list.

todofile=~/todo
historyfile=~/.todoHistory

str_usage="Usage: todo [e|w|p|px|up|u|q|l|h|x|hx] (task(s) | #)"

# Pops from $1 onto $popped ("return value")
pop() {
	if [[ ! -f $1 ]]; then
		echo "ERROR: No file \"$1\" to pop from!"
		error=1
		return
	fi

	if [[ $(cat $1) ]]; then
		popped=$(head -n1 $1)
		sed -i "1d" $1

		error=
		return
	else
		echo "ERROR: File $1 empty!"
		error=1
		return
	fi
}

# Pushes $1 onto $2 (file)
# $1 MUST be enclosed in quotes!
push() {
	if [[ $# -lt 2 ]]; then
		echo "ERROR: Not enough args for push!"
		error=1
		return
	fi

	if [[ ! -f $2 ]]; then
		echo "ERROR: Could not push onto non-file \"$2\"!"
		error=1
		return
	fi

	if [[ $(cat $2) ]]; then
		sed -i "1i $1" $2
	else
		echo "$1" > $2
	fi

	error=
	return
}

# Queues $1 onto $2 (file)
# $1 MUST be enclosed in quotes!
queue() {
	if [[ $# -lt 2 ]]; then
		echo "ERROR: Not enough args for queue!"
		error=1
		return
	fi

	if [[ ! -f $2 ]]; then
		echo "ERROR: Could not queue onto non-file \"$2\"!"
		error=1
		return
	fi

	echo "$1" >> $todofile

	error=
	return
}

# Echoes first $2 lines of $1
# "all" is an acceptable # of lines
# Default is 5
top() {
	if [[ ! $1 ]]; then
		echo "ERROR: No file \"$1\" to top from!"
		error=1
		return
	fi

	if [[ $2 ]]; then
		numlines=$2
	else
		numlines=5
	fi

	if [[ $2 == "all" ]]; then
		cat $1
	else
		head -n $numlines $1

		# if more than $numlines lines ...
		if [[ $(wc -l $1 | cut -d " " -f 1) -gt $numlines ]]; then
			echo "..."
		fi
	fi

	error=
	return
}

if [[ ! -f $todofile ]]; then
	echo "Creating $todofile..."
	touch $todofile
fi

if [[ ! -f $historyfile ]]; then
	echo "Creating $historyfile..."
	touch $historyfile
fi

case "$1" in
	e)
		vim $todofile
		;;
	w)
		cat > $todofile
		;;
	x)
		while [[ ! $error ]]; do
			pop $todofile > /dev/null
			if [[ ! $error ]]; then
				push "$popped" $historyfile
			else
				break
			fi
		done
		;;
	p)
		for i in $(seq 1 $2); do
			pop $todofile > /dev/null
			if [[ ! $error ]]; then
				push "$popped" $historyfile
			else
				echo "End of todo reached, popped $(($i-1)) total."
				break
			fi
		done
		;;
	px)
		for i in $(seq 1 $2); do
			pop $todofile > /dev/null
			if [[ $error ]]; then
				echo "End of todo reached, deleted $(($i-1)) total."
				break
			fi
		done
		;;
	up)
		for i in $(seq 1 $2); do
			pop $historyfile > /dev/null
			if [[ ! $error ]]; then
				push "$popped" $todofile
			else
				echo "End of todo reached, unpopped $(($i-1)) total."
				break
			fi
		done
		;;
	u)
		shift
		if [[ $# -lt 1 ]]; then
			echo "ERROR: No tasks provided!"
			exit 1
		fi

		for task in "$@"; do
			push "$task" $todofile
		done
		;;
	q)
		shift
		if [[ $# -lt 1 ]]; then
			echo "ERROR: No tasks provided!"
			exit 1
		fi

		for task in "$@"; do
			queue "$task" $todofile
		done
		;;
	l)
		top $todofile $2
		;;
	h)
		top $historyfile $2
		;;
	hx)
		read -n 1 -p "Really clear history? [y/n]: " input
		echo
		if [[ $input =~ [yY] ]]; then
			echo "Clearing history..."
			rm $historyfile
			touch $historyfile
		fi
		;;
	"")
		echo "$str_usage"
		echo "    e - edit (with vim)"
		echo "    w - write (with cat)"
		echo "    p (#) - pop # times (default 1)"
		echo "    px (#) - pop # times, no history (default 1)"
		echo "    up (#) - unpop # times (default 1)"
		echo "    u [task] (task) (...) - push"
		echo "    q [task] (task) (...) - queue"
		echo "    l (# | all)- list first # lines of todo (default 5)"
		echo "    h (# | all) - list first # lines of history (default 5)"
		echo "    x - clear todo"
		echo "    hx - clear history"
		;;
	*)
		echo "ERROR: Bad argument!"
		echo "$str_usage"
		;;
esac
