#!/usr/bin/env python
description = """
Counts how many times a dmenu entry has been run and
reorders accordingly. Executes dmenu as provided by
the remaining arguments.
"""

import sys
import json
import argparse
from subprocess import Popen, PIPE
from collections import defaultdict

# Get dmenu and counter_file
parser = argparse.ArgumentParser(description=description,
    usage="%(prog)s [--help] [-counter COUNTER] dmenu ...",
    add_help=False)
parser.add_argument('--help',
    help="show this help message and exit",
    action='help')
parser.add_argument('-counter',
    help="""
    the file to use for counting the number of times
    a program has executed. Uses ~/.dmenu_counter.json
    by default.
    """,
    type=str,
    default='~/.dmenu_counter.json')
args, dmenu = parser.parse_known_args()

counter_file = args.counter

# Check if we have a dmenu
if not len(dmenu):
  parser.error("No dmenu provided!")

counter = defaultdict(int)

# Try to load existing dictionary
try:
  with open(counter_file, 'r') as f:
    counter.update(json.load(f))

# Does not exist - proceed with an empty dict
except IOError:
  pass

# Add stdin items to dict
for line in sys.stdin:
  line = line.rstrip('\n')
  if line not in counter:
    counter[line] = 0

# Get a list of sorted items
items = [k for k, v in sorted(
  counter.iteritems(),
  # Sort decreasing val, then increasing key
  key=lambda x: (-x[1], x[0]),
)]

# Open up dmenu and get its output
dmenu_proc = Popen(dmenu, stdin=PIPE, stdout=PIPE)
selected = dmenu_proc.communicate('\n'.join(items))[0].split('\n')[0]

# Record the results
if selected:
  counter[selected] += 1
with open(counter_file, 'w') as f:
  json.dump(counter, f, indent=2)

# Output our selection
print(selected)
