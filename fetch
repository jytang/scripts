#!/usr/bin/env bash
# Fetch info about your system
#
# Original by Dylan Araps
# https://github.com/dylanaraps/dotfiles/
# Created by Ethan Chan
# https://github.com/metakirby5/dotfiles/

# Config file to source
# Can contain:
#   FETCH_TITLE=text
#   FETCH_UNDERLINE=text
#   FETCH_PRIMARY_N=0-7
#   FETCH_SECONDARY_N=0-7
#   FETCH_PRIMARY_CHAR=character to mark primary color with
#   FETCH_SECONDARY_CHAR=character to mark secondary color with
#   FETCH_OTHER_CHAR=character to mark other colors with
#   FETCH_CHARHEIGHT=number
#   FETCH_CHARWIDTH=number
#   FETCH_ADDITIONAL_PADDING=number
#   FETCH_IMGDIR=/some/path/
#
#   # Anything before the first colon is colored $FETCH_SECONDARY.
#   FETCH_INFO=(
#     "OS: $(cat /etc/*ease | awk -F= '/^NAME=/{ print $2 }')"
#     "Kernel: $(uname -r)"
#     "Uptime: $(uptime -p | sed 's/ou\|ute//g')"
#     # etc.
#   )

fetch_config=~/.config/fetch/config

# === DO NOT EDIT BELOW THIS LINE ===

usage() {
  echo "USAGE: $(basename "$0") [-h] [-i] [-r] [-f FUZZ]"
  echo "  -h              help"
  echo "  -l              list available images"
  echo "  -i IMG_SRC      image source"
  echo "  -r              remake image"
  echo "  -f FUZZ         fuzz to use in image creation"
  exit 1
}

[ -f "$fetch_config" ] && source "$fetch_config"

# Parse args
while getopts ":hli:rf:" opt; do
  case $opt in
    h) usage ;;
    l) list_img=1 ;;
    i) img_src="$OPTARG" ;;
    r) remake_img=1 ;;
    f) fuzz="$OPTARG" ;;
    \?) echo "Invalid option: -$OPTARG" >&2; usage ;;
    :) echo "Option -$OPTARG requires an argument." >&2; usage ;;
  esac
done

# Other actions
if [ -n "$list_img" ]; then
  ls "$imgdir"
  exit 0
fi

# Defaults
title="${FETCH_TITLE:-"$(whoami)"}"
underline="${FETCH_UNDERLINE:-"$(printf "%${#title}s" | tr ' ' '=')="}"
primary_n="${FETCH_PRIMARY_N:-1}"
secondary_n="${FETCH_SECONDARY_N:-4}"
primary_char="${FETCH_PRIMARY_CHAR:-"."}"
secondary_char="${FETCH_SECONDARY_CHAR:-"_"}"
other_char="${FETCH_OTHER_CHAR:-" "}"
charheight="${FETCH_CHARHEIGHT:-31}"
charwidth="${FETCH_CHARWIDTH:-"$(($charheight / 2))"}"
additional_padding="${FETCH_ADDITIONAL_PADDING:-2}"
imgdir="${FETCH_IMGDIR:-"$HOME/.fetch_crops/"}"

img_src="${img_src:-"$(cat ~/.fehbg | cut -d\' -f2)"}"
fuzz="${fuzz:-15%}"

[ -n "${FETCH_INFO+1}" ] && info=("${FETCH_INFO[@]}") || info=(
  "OS: $(cat /etc/*ease | awk -F= '/^NAME=/{ print $2 }')"
  "Kernel: $(uname -r)"
  "Uptime: $(uptime -p | sed 's/ou\|ute//g')"
  "Shell: $(basename "$SHELL")"
  "Window Manager: $(wmctrl -m | awk '/^Name:/{ print $2}')"
  "CPU: $(cat /proc/cpuinfo |\
    awk -F: '/^model name/{ gsub(/^\s+/, "", $2); print $2; exit }')"
  "Speed: $(lscpu |\
    awk -F: '/^CPU MHz:/{ print "scale=1;" $2 "/ 1000" }' | bc -l)GHz"
  "Memory: $(free -m | awk '/^Mem:/{ print $3 "/" $2 " MB" }')"
)

# Calculate sizing info
numlines="$((${#info[@]} + 5))" # title + underline + 3x color info = 5
isize="$(($numlines * $charheight))"
padlen="$(($isize / $charwidth + $additional_padding))"
linelen="$(($(tput cols) - $padlen))"
colorlen="$(($linelen / 8))" # 8 colors

# Sizing-dependent strings
pad="$(printf "%${padlen}s")"
color="$(printf "%${colorlen}s")"
markerseq="$(seq 1 $(($colorlen - 2)))" # space at start and end
pmarker=" $(printf "$primary_char%.0s" $markerseq) "
smarker=" $(printf "$secondary_char%.0s" $markerseq) "
omarker=" $(printf "$other_char%.0s" $markerseq) "

# Colors
primary="$(tput setaf $primary_n)"
secondary="$(tput setaf $secondary_n)"
bold="$(tput bold)"
clear="$(tput sgr0)"

put_color_header() {
  local text
  for i in `seq 0 7`; do
    case "$i" in
      "$primary_n")     text="$pmarker" ;;
      "$secondary_n")   text="$smarker" ;;
      *)                text="$omarker" ;;
    esac

    echo -n "$(tput setaf $i)$bold$text$clear"
  done
}

put_colors() {
  for i in `seq $1 $2`; do
    echo -n "$(tput setab $i)$color$clear"
  done
}

# Prepare the image
img="${imgdir%/}/$(basename "$img_src")"
if [ ! -f "$img" ] || [ -n "$remake_img" ]; then
  if [ ! -d "$imgdir" ]; then
    mkdir "$imgdir" || exit "$?"
  fi

  # Can we use smartcrop?
  if command -v smartcrop &>/dev/null; then
    smartcrop "$img_src" "$img" &>/dev/null
  else # Use imagemagick
    # Trim
    convert "$img_src" -crop "$(convert "$img_src" \
      -fuzz "$fuzz" -trim -format '%wx%h%O' info: 2>/dev/null)" \
      +repage "$img" &>/dev/null

    wsize="$(identify -format '%[fx:min(w,h)]' "$img" 2>/dev/null)"
    mogrify -crop "$wsize"x"$wsize"+0+0 -gravity center "$img" &>/dev/null
  fi

  if [ ! -f "$img" ]; then
    echo "Image \"$img_src\" not fond!"
    exit 1
  fi
fi

# Print info
clear
tput civis
echo "$pad$bold$primary$title$clear"
echo "$pad$primary$underline$clear"

for line in "${info[@]}"; do
  # If it has a colon, add some colors
  if [[ "$line" == *:* ]]; then
    cur="$bold$secondary${line%%:*}$clear:${line#*:}"
  else
    cur="$line"
  fi

  # Do some truncation
  len="$(echo -n "$line" | wc -c)"
  clen="$(($(echo -n "$cur" | wc -c) - $len))"
  if [ "$len" -gt "$linelen" ]; then
    # Need to account for length of non-printing characters
    cur="$(echo "$cur" | cut -c-$(($linelen + $clen - 1)))â€¦"
  fi

  echo "$pad$cur"
done

echo "$pad$(put_color_header)"
echo "$pad$(put_colors 0 7)"
echo "$pad$(put_colors 8 15)"
printf "0;1;$xoffset;$yoffset;$isize;$isize;;;;;$img\n4;\n3;" |\
  /usr/lib/w3m/w3mimgdisplay
tput cnorm

